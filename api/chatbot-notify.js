// Netlify serverless function for handling chatbot notifications
const { GraphQLClient } = require('graphql-request')

// Mailjet configuration
const mailjet = require('node-mailjet').connect(
  process.env.VITE_MAILJET_API_KEY,
  process.env.VITE_MAILJET_SECRET_KEY
)

// Hygraph client for mutations
const hygraph = new GraphQLClient(process.env.VITE_HYGRAPH_ENDPOINT, {
  headers: {
    authorization: `Bearer ${process.env.VITE_HYGRAPH_TOKEN}`,
  },
})

// GraphQL mutation for creating messages
const CREATE_MESSAGE = `
  mutation CreateMessage($data: MessageCreateInput!) {
    createMessage(data: $data) {
      id
      name
      email
      message {
        html
      }
      status
      source
      createdAt
    }
  }
`

// Email template for chatbot notifications
const getChatbotNotificationTemplate = (data) => `
  <html>
    <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
      <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
        <h2 style="color: #7c3aed; border-bottom: 2px solid #7c3aed; padding-bottom: 10px;">
          ðŸ¤– AI Chatbot Request - ${data.type}
        </h2>
        
        <div style="background-color: #faf5ff; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #7c3aed;">
          <p><strong>Request Type:</strong> ${data.type}</p>
          <p><strong>User:</strong> ${data.name || 'Anonymous'}</p>
          <p><strong>Email:</strong> ${data.email || 'Not provided'}</p>
          <p><strong>Timestamp:</strong> ${new Date().toLocaleString()}</p>
        </div>
        
        <div style="margin: 20px 0;">
          <h3 style="color: #6b21a8;">Request Details:</h3>
          <div style="background-color: #ffffff; padding: 15px; border-left: 4px solid #7c3aed; border-radius: 4px;">
            ${data.content}
          </div>
        </div>
        
        ${data.context ? `
        <div style="margin: 20px 0;">
          <h3 style="color: #6b21a8;">Additional Context:</h3>
          <div style="background-color: #f8fafc; padding: 15px; border-radius: 4px; font-size: 14px;">
            ${data.context}
          </div>
        </div>
        ` : ''}
        
        <div style="background-color: #fef3c7; padding: 15px; border-radius: 8px; margin: 20px 0;">
          <h4 style="color: #92400e; margin-top: 0;">Action Required</h4>
          <p style="margin-bottom: 0; color: #92400e;">
            This request may require human attention or follow-up. Please review and respond as appropriate.
          </p>
        </div>
        
        <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; font-size: 14px; color: #6b7280;">
          <p>This notification was generated by the Dohani Medicare AI chatbot system.</p>
          ${data.email && data.email !== 'chatbot@system' ? 
            `<p>You can respond directly to the user at: <a href="mailto:${data.email}">${data.email}</a></p>` : 
            '<p>No user email was provided for direct response.</p>'
          }
        </div>
      </div>
    </body>
  </html>
`

exports.handler = async (event, context) => {
  const { httpMethod, body, headers } = event

  // CORS headers
  const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'POST, OPTIONS'
  }

  if (httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers: corsHeaders,
      body: ''
    }
  }

  if (httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers: corsHeaders,
      body: JSON.stringify({ error: 'Method not allowed' })
    }
  }

  try {
    const { type, content, name, email, context: requestContext } = JSON.parse(body)

    // Validate required fields
    if (!type || !content) {
      return {
        statusCode: 400,
        headers: corsHeaders,
        body: JSON.stringify({ 
          error: 'Missing required fields',
          required: ['type', 'content']
        })
      }
    }

    // Create message in Hygraph
    const messageData = {
      name: name || 'Chatbot User',
      email: email || 'chatbot@system',
      message: {
        html: `
          <div>
            <h4>Chatbot Request: ${type}</h4>
            <p><strong>Content:</strong> ${content}</p>
            ${requestContext ? `<p><strong>Context:</strong> ${requestContext}</p>` : ''}
          </div>
        `
      },
      status: 'UNREAD',
      source: 'CHATBOT'
    }

    const hygraphResponse = await hygraph.request(CREATE_MESSAGE, {
      data: messageData
    })

    // Send email notification to admin
    try {
      await mailjet.post('send', { version: 'v3.1' }).request({
        Messages: [{
          From: {
            Email: process.env.VITE_SENDER_EMAIL,
            Name: "Dohani Medicare Chatbot"
          },
          To: [{
            Email: process.env.VITE_ADMIN_EMAIL,
            Name: "Dohani Medicare Admin"
          }],
          Subject: `ðŸ¤– Chatbot Request: ${type}`,
          HTMLPart: getChatbotNotificationTemplate({ type, content, name, email, context: requestContext }),
          TextPart: `Chatbot Request (${type}): ${content}${requestContext ? ` | Context: ${requestContext}` : ''}`
        }]
      })
    } catch (emailError) {
      console.error('Chatbot notification email error:', emailError)
      // Continue execution - don't fail the request if email fails
    }

    // Return success response
    return {
      statusCode: 201,
      headers: corsHeaders,
      body: JSON.stringify({
        success: true,
        message: 'Chatbot notification sent successfully',
        id: hygraphResponse.createMessage.id
      })
    }

  } catch (error) {
    console.error('Chatbot notification error:', error)
    
    // Return appropriate error response
    if (error.response?.errors) {
      return {
        statusCode: 400,
        headers: corsHeaders,
        body: JSON.stringify({
          error: 'Failed to save chatbot request',
          details: error.response.errors
        })
      }
    }

    return {
      statusCode: 500,
      headers: corsHeaders,
      body: JSON.stringify({
        error: 'Internal server error',
        message: 'Please try again later'
      })
    }
  }
}